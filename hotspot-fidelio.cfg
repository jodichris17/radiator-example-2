# hotspot-fidelio.cfg
#
# Example Radiator configuration file for operating a wired or wireless hotspot
# with authentication and billing to a Micros-Fidelio Property Management System (PMS).
#
# Requires SQL definitions from goodies/hotspot.sql and goodies/hotspot-fidelio.sql
# See goodies/README.hotspot-fidelio for more information
#
# You should consider this file to be a starting point only
# $Id$

### Global settings ###

Foreground
LogStdout
# User a lower Trace level in production systems
Trace        4
LogDir       .
DbDir        .

LogMicroseconds

AuthPort 1812,1645
AcctPort 1813,1646

### Clients ###

# Default Client
<Client DEFAULT>
    # Shared RADIUS secret
    Secret mysecret

    # Shared RADIUS secret for DYNAUTH
    #DynAuthSecret mysecret
</Client>

### Service and Session databases ###

# ServiceDatabase SQL for Services and Subscriptions
<ServiceDatabase SQL>
    Identifier ServiceDatabase-SQL

    # Details of how to contact the service and subscription database
    DBSource   dbi:SQLite:dbname=hotspot.db
    #DBSource   dbi:mysql:hotspot
    DBUsername mikem
    DBAuth     fred
</ServiceDatabase>

# SessionDatabase SQL for Sessions
<SessionDatabase SQL>
    Identifier SessionDatabase-SQL

    # Details of how to contact the session database
    DBSource   dbi:SQLite:dbname=hotspot.db
    #DBSource   dbi:mysql:hotspot
    DBUsername mikem
    DBAuth     fred

    # Modified SQL queries/statements for a new session database schema (goodies/hotspot.sql)
    CountQuery SELECT nas_id, nas_port, id, ipv4 FROM SESSIONS WHERE user_name=%0
    ClearNasQuery DELETE FROM SESSIONS WHERE nas_id='%0'
    AddQuery
    DeleteQuery
    ClearNasSessionQuery
</SessionDatabase>

# Default SessionDatabase NULL
<SessionDatabase NULL>
    Identifier SessionDatabase-NULL
</SessionDatabase>

### AuthBy Modules ###

<AuthBy HOTSPOTFIDELIO>
    Identifier AuthBy-HOTSPOTFIDELIO

    # Use ServiceDatabase-SQL for services and subscriptions
    ServiceDatabase ServiceDatabase-SQL
    # Lookup a subscription based on username (%1), Fidelio PMS Guest Number (%2) and Calling-Station-Id MAC address
    SubscriptionId %1-%2-%{Calling-Station-Id}

    # Use SessionDatabase-SQL for sessions
    SessionDatabase SessionDatabase-SQL
    # Lookup a session based on username (%1), Class (%3) and Calling-Station-Id MAC address
    SessionId %1-%3-%{Calling-Station-Id}
    # Empty SessionAttribute
    SessionAttribute

    # If RADIUS accounting will be used for quota monitoring,
    # create a new session upon a successful authentication
    PreProvisionSession

    # Alternatively, reply with remaining time quota
    #UsageMonitoring
    # and remaining data quota
    #ReplyWithDataQuota
    #DataLimitAttribute Mikrotik-Total-Limit
    #DataLimitGigawordsAttribute Mikrotik-Total-Limit-Gigawords

    # Details of how to contact the Fidelio posting database
    # See AuthSQL for details
    DBSource   dbi:SQLite:dbname=hotspot.db
    #DBSource   dbi:mysql:hotspot
    DBUsername mikem
    DBAuth     fred

    # Fidelio PMS interface
    Protocol tcp
    Port 5010
    Host localhost

    # Validity time in seconds of plan purchased
    # Default 86400 seconds (1 day)
    BlockDuration 86400

    # Default price for plan
    # Price in database overrides this value
    BlockPrice 900

    # ServiceAttribute defines the RADIUS attribute that is
    # used select the desired prepaid service or plan. On
    # Mikrotik login page you can create a menu as shown
    # below to display the different purchase
    # options. Note: "name=radius0-9048" is OSC-AVPAIR.
    #  <tr><td>Service:</td><td>
    #  <select name="radius0-9048">
    #  <option value="Mikrotik-Service=free">best effort (free)</option>
    #  <option value="Mikrotik-Service=premium">premium ($5)</option>
    #  </select></td></tr>
    ServiceAttribute OSC-AVPAIR

    # If it is possible that there are multiple instances
    # of the ServiceAttribute in the request, you can use
    # an optional prefix to choose the correct instance.
    ServiceAttributePrefix Mikrotik-Service=

    # By default upgrade or renewal of the current plan is
    # automatically processed and charged. With this option
    # you can ask the guest to confirm the charge first.
    # With Mikrotik you can show the message to the guest
    # by including
    #  $(if error)<br /><div style="color: #FF8080; font-size: 14px">$(error)</div><br>$(endif)
    # on the Mikrotik login page
    #ConfirmSubscription
    #ConfirmationMessage "You are going to upgrade or renew your plan, please login again to confirm the charge"

    # This one uses the last part of the guest name (case sensitive) as the
    # password. This is usually the guest surname
    UserPasswordHook sub {my @n = split(/\s/, $_[1]->{'GN'}); return $n[$#n];}

    # Need this to ensure the Guest Number is included in the postings
    # Required when there are multiple guests per room
    #PostingExtraFields G#,%4

    # You can add extra attributes in the reply here if you wish
    # to set limits or controls over access
    #AddToReply Mikrotik-Recv-Limit-Gigawords=1,Mikrotik-Xmit-Limit-Gigawords=1

    # Note about SQL queries: SQL queries can be configured
    # with SQL bind variables. See the Radiator reference
    # manual for more about SQL bind variables.
    #
    # When SQL bind variables are used, all query
    # parameters must be specified with the respective
    # *QueryParam configuration parameters.
    #
    # The examples below show how the queries can be
    # configured with and without bind variables.
    #
    # The default queries are the ones without bind
    # variables.

    # SQL query to keep track of Posting records send to Opera
    #PostSendQuery INSERT INTO posts (roomNumber, guestNumber, macAddress, postNumber, posted, cost) VALUES (%0, %1, %2, %3, %4, %5)
    #PostSendQuery INSERT INTO posts (roomNumber, guestNumber, macAddress, postNumber, posted, cost) VALUES (?, ?, ?, ?, ?, ?)
    #PostSendQueryParam %0
    #PostSendQueryParam %1
    #PostSendQueryParam %2
    #PostSendQueryParam %3
    #PostSendQueryParam %4
    #PostSendQueryParam %5

    # SQL query to keep track of Posting Answers sent by Opera
    #PostAnswerQuery INSERT INTO postacks (roomNumber, postNumber, transactionNumber, received) values (%0, %1, %2, %3)
    #PostAnswerQuery INSERT INTO postacks (roomNumber, postNumber, transactionNumber, received) values (?, ?, ?, ?)
    #PostAnswerQueryParam %0
    #PostAnswerQueryParam %1
    #PostAnswerQueryParam %2
    #PostAnswerQueryParam %3
</AuthBy>

# AuthBy DyNAUTH for creating DM/CoA requests for exceeded sessions
<AuthBy DYNAUTH>
    Identifier AuthBy-DYNAUTH

    SessionDatabase SessionDatabase-SQL

    # Send Change-Filter-Request (CoA) to NAS UDP port 1700
    #RequestType Change-Filter-Request
    # Send Disconnect-Request (DM) to NAS UDP port 1700
    RequestType Disconnect-Request
    DynAuthPort 1700

    # Do not try to lookup a session again
    NoSessionMapping

    # Send CoA/DM to IP address within NAS-IP-Address RADIUS attribute
    NasAddrAttribute NAS-IP-Address

    # Identify user session by User-Name, Acct-Session-Id and NAS-Port
    DynAuthAttribute User-Name
    DynAuthAttribute Acct-Session-Id
    DynAuthAttribute NAS-Port
</AuthBy>

# AuthBy RADIUSBYATTR for sending out DM/CoA requests for exceeded sessions
<AuthBy RADIUSBYATTR>
    Identifier AuthBy-RADIUSBYATTR
</AuthBy>

### Request Handlers ###

# Accounting Handler
<Handler Request-Type=Accounting-Request>
    Identifier Accounting-Handler

    # Acknowledge Accounting-Request immediately
    AccountingAccepted

    AuthByPolicy ContinueUntilRejectOrChallenge

    # Handle RADIUS accounting
    AuthBy AuthBy-HOTSPOTFIDELIO
    # Send DM/CoA request for exceeded session
    AuthBy AuthBy-DYNAUTH
</Handler>

# Outgoing DM/CoA Handler
<Handler DynAuthRequest=1>
    Identifier Handler-DYNAUTH

    AuthBy AuthBy-RADIUSBYATTR
</Handler>

# Default Handler
<Handler>
    Identifier Default-Handler

    # Use SessionDatabase-SQL
    SessionDatabase SessionDatabase-SQL
    # Don't try to delete a session before authentication
    SessionDatabaseOptions NoDeleteBeforeAuthentication

    # Handle RADIUS authentication
    AuthBy AuthBy-HOTSPOTFIDELIO

    RejectHasReason
</Handler>
