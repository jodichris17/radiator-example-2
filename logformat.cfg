# logformat.cfg
#
# Example Radiator configuration file showing how to
# use:
# - LogFormatHook for Log FILE,   AcctLog FILE   and AuthLog FILE
# - LogFormatHook for Log SYSLOG, AcctLog SYSLOG and AuthLog SYSLOG
# - AcctLogFileFormatHook
# - GlobalMessageLog to log received and sent RADIUS messages
#
# Consider installing JSON::XS for faster encoding. JSON::XS is
# automatically used when it's available. See JSON::XS documentation
# in CPAN for more information.
#
# You should consider this file to be a starting point only
# $Id$

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# Log all RADIUS messages with MessageLog
GlobalMessageLog radius,messagelograd

# Use StartupHook if you wish to use a custom module for log formatting.
# The hooks need to call CustomLogFormat::func_name(@_)
#StartupHook sub { require "/etc/radiator/CustomLogFormat.pm"; }

# This message logger writes received and sent messages to a file.
# Currently supported encodings are none and hex, where hex encodes
# each log entry as a single row. Decode hex with something like:
# perl -n -e 'chomp; print pack("H*", $_)' < messagelog-radius-text-hex > messagelog-radius.txt
<MessageLog FILE>
        Identifier messagelograd
        Format text
        #Encoding hex
	# %0 is the protocol (e.g., radius), %1 is the Format, %2 is the Encoding
	Filename %L/messagelog-%0-%1

	# Optional LogSelectHook to log only some packets.
	# LogSelectHook's arguments are: direction, protocol, from_ip, from_port, to_ip, to_port, request_object
	# Direction is 'in' or 'out'. Protocol is the protocol name
	# from the configuration file, for example 'radsec'.
	#
	# Log only requests from/to 10.10.10.10
	#LogSelectHook sub { return 1 if ($_[2] eq '10.10.10.10' || $_[4] eq '10.10.10.10') }
</MessageLog>

# This logger logs events in JSON format. Requires the Perl JSON
# module. Note the specific requirement for loading the logger module.
<Log FILE>
	Identifier mylogger-json
	Trace 4
	Filename %L/logfile.json
	LogFormatHook sub { Radius::LogFormat::format_log_json(@_); }
	#
	# Note: StartupHook runs after the configuration file has been
	# processed. If you use your custom log formatting module, you
	# should load your module here, for example:
	#LogFormatHook sub { require "/etc/radiator/CustomLogFormat.pm"; CustomLogFormat::format_log_json(@_); }
</Log>

# Use syslog to log events in JSON format. See Log FILE comments above
# for more information.
<Log SYSLOG>
	Identifier mysyslogger-json
	Trace 4
	LogIdent radiator
	Facility local1
	LogFormatHook sub { Radius::LogFormat::format_log_json(@_); }
</Log>

# You will probably want to change this to suit your site.
<Client DEFAULT>
	Secret	mysecret
</Client>

# This auth logger logs both success and failure to a file in CEF
# compliant format.
<AuthLog FILE>
	Identifier myauthlogger-cef
	Filename %L/authlog.cef
	LogFormatHook sub { Radius::LogFormat::format_authlog_cef(@_); }
	LogSuccess 1
	LogFailure 1
</AuthLog>

# This auth logger logs both success and failure to a file in
# JSON format. The JSON Perl module must be installed.
<AuthLog FILE>
	Identifier myauthlogger-json
	Filename %L/authlog.json
	LogFormatHook sub { Radius::LogFormat::format_authlog_json(@_); }
	LogSuccess 1
	LogFailure 1
</AuthLog>

# This auth logger logs both success and failure to syslog. See
# myauthlogger-json above for more information
<AuthLog SYSLOG>
	Identifier myauthsyslogger-json
	LogIdent radiator
	Facility local2
	LogFormatHook sub { Radius::LogFormat::format_authlog_json(@_); }
	LogSuccess 1
	LogFailure 1
</AuthLog>

# This acct logger logs accounting to a file in a default format.
<AcctLog FILE>
	Identifier myacctlogger-default
	Filename %L/acctlog.default
	LogFormat %l:%n:%{Acct-Session-Id}:%{Framed-IP-Address}:%{Calling-Station-Id}
</AcctLog>

# This acct logger logs accounting to a file in CEF
# compliant format.
<AcctLog FILE>
	Identifier myacctlogger-cef
	Filename %L/acctlog.cef
	LogFormatHook sub { Radius::LogFormat::format_acctlog_cef(@_); }
</AcctLog>

# This acct logger logs accounting to a file in
# JSON format. The JSON Perl module must be installed.
<AcctLog FILE>
	Identifier myacctlogger-json
	OutputFormat JSON
	Filename %L/acctlog.json
	# Use RADIUS attribute as JSON field name
	AcctLogOutputDef Connect-Info
	# Map attribute to JSON field
	AcctLogOutputDef Custom-Event-Timestamp, Event-Timestamp
	# Use special variables
	AcctLogOutputDef Custom-Original-Username, %u
	AcctLogOutputDef Custom-User-Name, %n
</AcctLog>

# This acct logger logs accounting to syslog in a default format.
<AcctLog SYSLOG>
	Identifier myacctsyslogger-default
	LogIdent radiator
	Facility local3
	LogFormat %l:%n:%{Acct-Session-Id}:%{Framed-IP-Address}:%{Calling-Station-Id}
</AcctLog>

# This acct logger logs accounting to syslog. See
# myacctlogger-json above for more information
<AcctLog SYSLOG>
	Identifier myacctsyslogger-json
	LogIdent radiator
	Facility local4
	LogFormatHook sub { Radius::LogFormat::format_acctlog_json(@_); }
</AcctLog>

<Handler>
	<AuthBy FILE>
		Filename %D/users
	</AuthBy>

	# Log authentication success and failure to files
	AuthLog myauthlogger-cef
	AuthLog myauthlogger-json
	AuthLog myauthsyslogger-json

	# Log accounting messages in JSON format. The JSON Perl module
	# must to be installed.
	AcctLogFileName %L/acctlog.json
	AcctLogFileFormatHook sub { Radius::LogFormat::format_acctlog_json(@_); }

	# Alternatively define AcctLog(s) to log accounting
	#AcctLog myacctlogger-default
	#AcctLog myacctlogger-cef
	#AcctLog myacctlogger-json
	#AcctLog myacctsyslogger-default
	#AcctLog myacctsyslogger-json
</Handler>
