# fidelio-hotspot.cfg
#
# Example Radiator configuration file for operating a wired or wireless hotspot
# with authenticating from and billing
# to a Micros-Fidelio Property Management System (PMS)
# Previous version of this config file used the fidelio-hotspot-hook.pl, which
# is now obsolete and replaced by AuthFIDELIOHOTSPOT.pm
#
# New deployments with Radiator 4.22 and later should use AuthBy
# HOTSPOTFIDELIO which supersedes this module.
#
# See radius.cfg for more complete examples of features and
# syntax, and refer to the reference manual for a complete description
# of all the features and syntax.
# See goodies/fidelio-hotspot.sql for sample SQL schema
# Test with:
#  echo "delete from sessions;" |mysql -umikem -pfred hotspot
#  perl goodies/fideliosim.pl -trace 4
#  perl radpwtst -user 001 -password 12345 -noacct
#
# You should consider this file to be a starting point only
# $Id$

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace		4

# By default, Microtik and some other hotspots default to 1812/1813
AuthPort 1812,1645
AcctPort 1813,1646

# Make sure that Secret agrees with the RADIUS shared secret configured into your hotspot RADIUS configuration
<Client DEFAULT>
	Secret	mysecret
</Client>

<Handler>
       # This clause authenticate Access-Requests against room number and guest number from 
       # the Fidelio Opera database.
       # This clause also manages the prepaid sessions for each user.
       # If there is no database entry for this room/guest/mac, create one and charge the room
       # If there is a	database entry for this room/guest/mac but it has expired, 
       # extend it and charge the room
       # If there is a	database entry for this room/guest/mac but it has not expired, accept, with
       # a Session-Timeout of the remaining time from the record.
       <AuthBy FIDELIOHOTSPOT>

	       # Details of how to contact the prepaid session database
	       # See AuthSQL for details
	       DBSource	dbi:mysql:hotspot
	       DBUsername	mikem
	       DBAuth		fred

	       Protocol tcp
	       Port 5010
	       Host localhost

	       # DO not use AuthBy FIDELIO functions for accounting:
	       HandleAcctStatusTypes noneatall

	       # Validity time in seconds of plan purchased
	       # Default 86400 seconds (1 day)
	       BlockDuration 86400
	       
	       # Default price for plan
	       # Price in database overrides this value
	       BlockPrice 900

	       # ServiceAttribute defines the RADIUS attribute that is
	       # used select the desired prepaid service or plan. On
	       # Mikrotik login page you can create a menu as shown
	       # below to display the different purchase
	       # options. Note: "name=radius0-9048" is OSC-AVPAIR.
	       #  <tr><td>Service:</td><td>
	       #  <select name="radius0-9048">
	       #  <option value="Mikrotik-Service=free">best effort (free)</option>
	       #  <option value="Mikrotik-Service=premium">premium ($5)</option>
	       #  </select></td></tr>
	       #ServiceAttribute OSC-AVPAIR

	       # If it is possible that there are multiple instances
	       # of the ServiceAttribute in the request, you can use
	       # an optional prefix to choose the correct instance.
	       #ServiceAttributePrefix Mikrotik-Service=

	       # By default upgrade or renewal of the current plan is
	       # automatically processed and charged. With this option
	       # you can ask the guest to confirm the charge first.
	       # With Mikrotik you can show the message to the guest
	       # by including
	       #  $(if error)<br /><div style="color: #FF8080; font-size: 14px">$(error)</div><br>$(endif)
	       # on the Mikrotik login page 
	       #ConfirmUpgradeOrRenew
	       #ConfirmationMessage "You are going to upgrade or renew your plan, please login again to confirm the charge"

	       # This one uses the last part of the guest name (case sensitive) as the
	       # password. This is usually the guest surname
	       UserPasswordHook sub {my @n = split(/\s/, $_[1]->{'GN'}); return $n[$#n];}

	       # Need this to ensure the Guest Number is included in the postings
	       # Required when there are multiple guests per room
	       #PostingExtraFields G#,%4

	       # You can add extra attributes in the reply here if you wish
	       # to set limits or controls over access
	       #AddToReply Mikrotik-Recv-Limit-Gigawords=1,Mikrotik-Xmit-Limit-Gigawords=1

	       # Note about SQL queries: SQL queries can be configured
	       # with SQL bind variables. See the Radiator reference
	       # manual for more about SQL bind variables.
	       #
	       # When SQL bind variables are used, all query
	       # parameters must be specified with the respective
	       # *QueryParam configuration parameters.
	       #
	       # The examples below show how the queries can be
	       # configured with and without bind variables.
	       #
	       # The default queries are the ones without bind
	       # variables.

	       # SQL query to use when ConfirmUpgradeOrRenew is set.
	       # This will record the confirm state in the DB
	       #ConfirmationQuery UPDATE sessions SET confirmation_requested=1 WHERE roomNumber=%0 AND guestNumber=%1 AND macAddress=%2
	       #ConfirmationQuery UPDATE sessions SET confirmation_requested=1 WHERE roomNumber=? AND guestNumber=? AND macAddress=?
	       #ConfirmationQueryParam %0
	       #ConfirmationQueryParam %1
	       #ConfirmationQueryParam %2

	       # SQL query to keep track of Posting records send to
	       # Opera
	       #PostSendQuery INSERT INTO posts (roomNumber, guestNumber, macAddress, postNumber, posted, cost) VALUES (%0, %1, %2, %3, %4, %5)
	       #PostSendQuery INSERT INTO posts (roomNumber, guestNumber, macAddress, postNumber, posted, cost) VALUES (?, ?, ?, ?, ?, ?)
	       #PostSendQueryParam %0
	       #PostSendQueryParam %1
	       #PostSendQueryParam %2
	       #PostSendQueryParam %3
	       #PostSendQueryParam %4
	       #PostSendQueryParam %5

	       # SQL query to keep track of Posting Answers sent by
	       # Opera
	       #PostAnswerQuery INSERT INTO postacks (roomNumber, postNumber, transactionNumber, received) values (%0, %1, %2, %3)
	       #PostAnswerQuery INSERT INTO postacks (roomNumber, postNumber, transactionNumber, received) values (?, ?, ?, ?)
	       #PostAnswerQueryParam %0
	       #PostAnswerQueryParam %1
	       #PostAnswerQueryParam %2
	       #PostAnswerQueryParam %3

	       # SQL query to fetch information about a service
	       #GetServiceQuery SELECT price, duration, replyattributes FROM services WHERE serviceclass=%0
	       #GetServiceQuery SELECT price, duration, replyattributes FROM services WHERE serviceclass=?
	       #GetServiceQueryParam %0

	       # SQL query to fetch information about a prepaid
	       # service and the user's current session
	       #GetCurrentServiceQuery SELECT expiry,replyattributes,price,sessions.serviceclass,confirmation_requested FROM sessions LEFT JOIN services ON \
	       #			             sessions.serviceclass=services.serviceclass WHERE roomNumber=%0 AND guestNumber=%1 AND macAddress=%2
	       # GetCurrentServiceQuery SELECT expiry,replyattributes,price,sessions.serviceclass,confirmation_requested FROM sessions LEFT JOIN services ON \
	       # 			             sessions.serviceclass=services.serviceclass WHERE roomNumber=? AND guestNumber=? AND macAddress=?
	       # GetCurrentServiceQueryParam %0
	       # GetCurrentServiceQueryParam %1
	       # GetCurrentServiceQueryParam %2

	       # SQL query to add a prepaid or postpaid
	       # session. Serviceclass is empty for prepaid service
	       #AddSessionQuery INSERT INTO sessions (roomNumber, guestNumber, macAddress, serviceclass, expiry) VALUES (%0, %1, %2, %3, %4)
	       #AddSessionQuery INSERT INTO sessions (roomNumber, guestNumber, macAddress, serviceclass, expiry) VALUES (?, ?, ?, ?, ?)
	       #AddSessionQueryParam %0
	       #AddSessionQueryParam %1
	       #AddSessionQueryParam %2
	       #AddSessionQueryParam %3
	       #AddSessionQueryParam %4

	       # SQL query to update a prepaid or postpaid session
	       #UpdateSessionQuery UPDATE sessions SET serviceclass=%3, expiry=%4,confirmation_requested=0 WHERE roomNumber=%0 AND guestNumber=%1 AND macAddress=%2
	       #UpdateSessionQuery UPDATE sessions SET serviceclass=?, expiry=?, confirmation_requested=0 WHERE roomNumber=? AND guestNumber=? AND macAddress=?
	       #UpdateSessionQueryParam %3
	       #UpdateSessionQueryParam %4
	       #UpdateSessionQueryParam %0
	       #UpdateSessionQueryParam %1
	       #UpdateSessionQueryParam %2

	       # SQL query to fetch postpaid session information.
	       #GetSessionQuery SELECT expiry FROM sessions WHERE roomNumber=%0 AND guestNumber=%1 AND macAddress=%2
	       #GetSessionQuery SELECT expiry FROM sessions WHERE roomNumber=? AND guestNumber=? AND macAddress=?
	       #GetSessionQueryParam %0
	       #GetSessionQueryParam %1
	       #GetSessionQueryParam %2
        </AuthBy>

	# Normally, when Radiator rejects an Access-Request, it sets the reply message to
	# "Request Denied". This optional parameter forces Radiator to put an additional Reply-
	# Message into Access-Reject indicating why the rejection occurred.
	RejectHasReason
</Handler>
