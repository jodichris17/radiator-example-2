#!/bin/sh
#
# radiator      This shell script takes care of starting and stopping
#               Radiator (radius daemon).
#
# chkconfig: 2345 90 15
# description: radiator is the radius daemon required for RAS AAA.
# processname: /usr/bin/radiusd
# pidfile: /var/log/radius/radiusd.pid
# config: /etc/radiator/radius.cfg
# config: /etc/sysconfig/radiator
#
# Next section is required for LSB by http://wiki.debian.org/LSBInitScripts
### BEGIN INIT INFO
# Provides:          radiator
# Required-Start:    $remote_fs $syslog $named $network
# Required-Stop:     $remote_fs $syslog $named $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by daemon.
### END INIT INFO
#
# Startup script for Radiator on Linux. Install this as 
# /etc/init.d/radiator. If you have chkconfig, you can use
# chkconfig -add radiator
# to generate the required start asnd stop entries in /etc/rc[2345].d/
# Otherwise, you need to add symlinks to /etc/rc[2345].d/
#
# config: /etc/radiator/radius.cfg
#
# Author: Tuure Vartiainen (vartiait@radiatorsoftware.com)
# Copyright (C) 2000-2013 Open System Consultants Pty Ltd
# Copyright (C) 2013-2017 Arch Red Oy
# Copyright (C) 2013-2018 Radiator Software Oy
#
# $Id$

# You can override defaults by setting variables in
# /etc/sysconfig/PROGNAME or /etc/default/PROGNAME where PROGNAME
# is the name of this script (eg /etc/sysconfig/radiator or /etc/default/radiator)
# readlink gets the real init file name, just in case it is invoked from a symlink:
PROGRAM=`readlink -f $0`
PROGRAM=`basename ${PROGRAM}`
# By default, don't rely on a missing PID file
CHECK_PIDFILE=0
# Optional instance name command-line argument
INSTANCE=$2
INSTANCE_CONFIG=${INSTANCE}
INSTANCE_BIN=${INSTANCE}
if [ -z "${INSTANCE}" ]; then
    INSTANCE=${PROGRAM}
    INSTANCE_CONFIG=radius
    INSTANCE_BIN=radiusd
fi

SYSCONFIG=/etc/sysconfig/${PROGRAM}
DEFAULTCONFIG=/etc/default/${PROGRAM}
INSTANCE_SYSCONFIG=/etc/sysconfig/${INSTANCE}
INSTANCE_DEFAULTCONFIG=/etc/default/${INSTANCE}

[ -f "${SYSCONFIG}" ] && . "${SYSCONFIG}"
[ -f "${DEFAULTCONFIG}" ] && . "${DEFAULTCONFIG}"

[ -f "${INSTANCE_SYSCONFIG}" ] && . "${INSTANCE_SYSCONFIG}"
[ -f "${INSTANCE_DEFAULTCONFIG}" ] && . "${INSTANCE_DEFAULTCONFIG}"

[ -z "${PERL}" ] && PERL=`which perl`
[ -z "${RADIUSD}" ] && RADIUSD=/usr/bin/radiusd
# As a fallback, search radiusd from Perl's INSTALLSITEBIN dir
if [ ! -x $RADIUSD ]; then
    PERL_INSTALLSITEBIN=`$PERL -MConfig -e 'print qq{$Config{installsitebin}}'`
    RADIUSD=$PERL_INSTALLSITEBIN/radiusd
fi
[ -z "${RADIATOR_CONFIG}" ] && RADIATOR_CONFIG=/etc/radiator/${INSTANCE_CONFIG}.cfg
[ -z "${RADIUSD_PIDFILE}" ] && RADIUSD_PIDFILE="/var/log/radius/${INSTANCE_BIN}.pid"
[ -z "${RADIATOR_ARGS}" ] && RADIATOR_ARGS="instance=${INSTANCE}"
[ -z "${RADIUSD_ARGS}" ] && RADIUSD_ARGS="-pid_file $RADIUSD_PIDFILE -config_file $RADIATOR_CONFIG -daemon $RADIATOR_ARGS"

# Source 'em up
if [ -f /etc/init.d/functions ]; then
# LSB, RedHat, Mandrake etc:
. /etc/init.d/functions
STARTPROC="daemon $RADIUSD $RADIUSD_ARGS"
CHECKPROC="status -p ${RADIUSD_PIDFILE} ${PROGRAM}"
CHECKPROC2="ps -fC `basename ${RADIUSD}` 2>&1 > /dev/null"
KILLPROC="killproc -p ${RADIUSD_PIDFILE} -d 5 ${PROGRAM}"
RELOADPROC="killproc -p ${RADIUSD_PIDFILE} ${PROGRAM} -HUP"
TRACEUPPROC="killproc -p ${RADIUSD_PIDFILE} ${PROGRAM} -USR1"
TRACEDOWNPROC="killproc -p ${RADIUSD_PIDFILE} ${PROGRAM} -USR2"
elif  [ -x /sbin/start-stop-daemon ]; then
# Debian, Ubuntu
STARTPROC="/sbin/start-stop-daemon --start --pidfile ${RADIUSD_PIDFILE} --exec $RADIUSD -- $RADIUSD_ARGS"
CHECKPROC='ps -fp `cat ${RADIUSD_PIDFILE}`'
CHECKPROC2="ps -fC `basename ${RADIUSD}` 2>&1 > /dev/null"
KILLPROC="/sbin/start-stop-daemon --stop --retry 6 --pidfile ${RADIUSD_PIDFILE}"
RELOADPROC="/sbin/start-stop-daemon --stop --signal HUP --pidfile ${RADIUSD_PIDFILE}"
TRACEUPPROC="/sbin/start-stop-daemon --stop --signal USR1 --pidfile ${RADIUSD_PIDFILE}"
TRACEDOWNPROC="/sbin/start-stop-daemon --stop --signal USR2 --pidfile ${RADIUSD_PIDFILE}"
elif [ -x /sbin/startproc ]; then
# SuSE etc
STARTPROC="/sbin/startproc $RADIUSD $RADIUSD_ARGS"
CHECKPROC='ps -fp `cat ${RADIUSD_PIDFILE}`'
CHECKPROC2="ps -fC `basename ${RADIUSD}` 2>&1 > /dev/null"
KILLPROC="killproc -p ${RADIUSD_PIDFILE} $RADIUSD"
RELOADPROC="killproc -p ${RADIUSD_PIDFILE} -HUP $RADIUSD"
TRACEUPPROC="killproc -p ${RADIUSD_PIDFILE} -USR1 $RADIUSD"
TRACEDOWNPROC="killproc -p ${RADIUSD_PIDFILE} -USR2 $RADIUSD"
else
# No daemon starter; Slackware?
STARTPROC="$RADIUSD $RADIUSD_ARGS"
CHECKPROC='ps -fp `cat ${RADIUSD_PIDFILE}`'
CHECKPROC2="ps -fC `basename ${RADIUSD}` 2>&1 > /dev/null"
KILLPROC="killproc -p ${RADIUSD_PIDFILE}"
RELOADPROC="killproc -p ${RADIUSD_PIDFILE} -HUP"
TRACEUPPROC="killproc -p ${RADIUSD_PIDFILE} -USR1"
TRACEDOWNPROC="killproc -p ${RADIUSD_PIDFILE} -USR2"
fi

# Source additional OPTIONS if we have them.
if [ -f /etc/sysconfig/radiator ] ; then
    . /etc/sysconfig/radiator
fi

if [ ! -x $RADIUSD ]; then
    echo "Can not find Radiator radiusd program, define RADIUSD environment variable!"
    exit 1
fi

start() {
    # don't do squat if we don't have the config file
    if [ -f $RADIATOR_CONFIG ]; then
        getstatus 2>&1 > /dev/null
        if [ ! -z "$CHECKPROC" ] && [ "$RETVAL" -eq 0 ]; then
            if [ -f "${RADIUSD_PIDFILE}" ]; then
                RADIUSD_PID=`cat ${RADIUSD_PIDFILE}`
                echo "Radiator (${INSTANCE}) is already running with PID ${RADIUSD_PID}"
                exit 1
            else
                echo "Radiator (${INSTANCE}) is already running, but without a PID file"
                exit 1
            fi
        fi
        echo -n "Starting Radiator (${INSTANCE}): "
        $STARTPROC
        RETVAL=$?
        echo
    else
        echo "Unable to find config file (${INSTANCE}) $RADIATOR_CONFIG!"
    fi
    return $RETVAL
}

stop() {
    echo -n "Shutting down Radiator (${INSTANCE}): "
    $KILLPROC
    RETVAL=$?
    echo
    return $RETVAL
}

getstatus() {
    if [ -z "$CHECKPROC" ]; then
        RETVAL=1
        return $RETVAL
    fi
    if [ "$CHECK_PIDFILE" -ne 0 ] && [ ! -f "${RADIUSD_PIDFILE}" ]; then
        echo "Radiator (${INSTANCE}) is not running, can not find PID file: ${RADIUSD_PIDFILE}"
        RETVAL=1
        return $RETVAL
    fi
    if [ -f "${RADIUSD_PIDFILE}" ]; then
        eval $CHECKPROC
        RETVAL=$?
    else
        RETVAL=1
    fi
    if [ "$RETVAL" -ne 0 ] && [ ! -z "$CHECKPROC2" ]; then
        eval $CHECKPROC2
        RETVAL=$?
        if [ "$RETVAL" -eq 0 ]; then
            echo "Radiator (${INSTANCE}) is running, can not find PID file: ${RADIUSD_PIDFILE}"
        else
            echo "Radiator (${INSTANCE}) is not running"
        fi
    else
        echo "Radiator (${INSTANCE}) is running"
    fi
    return $RETVAL
}

reload() {
    echo -n "Reloading Radiator (${INSTANCE}) configuration (via SIGHUP): "
    $RELOADPROC
    RETVAL=$?
    echo
    return $RETVAL
}

traceup() {
    echo -n "Increasing Radiator (${INSTANCE}) Trace Level by 1 (via USR1): "
    $TRACEUPPROC
    RETVAL=$?
    echo
    return $RETVAL
}

tracedown() {
    echo -n "Decreasing Radiator (${INSTANCE}) Trace Level by 1 (via USR2): "
    $TRACEDOWNPROC
    RETVAL=$?
    echo
    return $RETVAL
}

case "$1" in
  start)
        start
    ;;
  stop)
        stop
    ;;
  reload)
        reload
    ;;
  restart)
        stop
        start
    ;;
  status)
        getstatus
    ;;
  traceup)
        traceup
    ;;
  tracedown)
        tracedown
    ;;
  *)
        echo "Usage: $0 {start|stop|restart|reload|status|traceup|tracedown} [instance_name]"
        exit 1
esac

exit $RETVAL
