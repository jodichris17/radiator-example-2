# farmsize.cfg
#
# Example Radiator configuration file.
#
# This shows how to set up a server farm that will distribute requests
# among multiple back ends, and will also ensure related requests
# always go to the same backend that handled the first request in the
# conversation.
#
# Shared memory is used for duplicate cache between the farm workers.
#
# Information about backend host failures is distributed with the
# Radiator Gossip framework.
#
# Requires the following CPAN modules:
#   Redis, Data::MessagePack for the Gossip framework
#   Cache::FastMmap if 'DupCache shared' is enabled
#   Data::Printer if Debug is enabled in the GossipRedis clause
#
# $Id$

Foreground
LogStdout
LogDir		.
DbDir		.
# User a lower trace level in production systems:
Trace 		4

# This tells Radiator to run as a server farm of FarmSize instances.
# Each instance will listen on all incoming request sockets, and
# incoming requests will be distributed by the operating system in
# round-robin fashion. This allows you to run several identical
# instances of Radiator as a server farm on a multicore machine.  This
# is not useful unless you have a multicore or multiprocessor machine
# where each fork runs on a separate CPU.
#
# The default of 0 means just run one instance as per usual.
# FarmSize is available for Unix only
#FarmSize %{GlobalVar:farm_size}
FarmSize 4

# You can have a separate log file for each server farm instance by
# using the %O special character which is translated into the farm
# instance number (defaults to 0 for the main parent instance)
LogFile %D/logfile-farm-instance-%O

# Enable shared memory based duplicate cache. All farm instances share
# the same duplicate cache. Possible values are: local, shared and global.
# The default is local. DupCacheFile sets the shared memory based cache
# file name. %0 is replaced by -pid-timestamp-random.
# Note: DupCacheFile should be readable only by Radiator process.
DupCache shared
DupCacheFile /tmp/eapbalance-dupcache%0

# You will probably want to change this to suit your site.
<Client DEFAULT>
	Secret	mysecret
</Client>

# The Gossip instance HASHBALANCE uses for distributing information
# about failed Hosts.
<GossipRedis>
	# Other clauses use Identifier to utilise this GossipRedis
        Identifier gossip-redis

	# Specifies Redis server to connect to. Defaults to 127.0.0.1
	#Host 10.20.30.3

	# This optional parameter specifies the symbolic service name
	# or port number of the Redis server. Defaults to 6379.
	#Port 6380

	# Specifies Unix domain socket to connect to Redis server
	#Sock /var/run/redis/redis.sock

	# Specifies Redis Sentinels to connect to
	#Sentinels 10.20.30.3, 10.20.40.4

	# Specifies the name of the service to connect to. Defaults to
	# 'mymaster'
	#SentinelService radiusmaster

	# This optional parameter specifies the symbolic service name
	# or port number of the Sentinels. Defaults to 26379.
	#SentinelPort 26380

	# Specifies a password to be used to login the Redis host.
	#Password secret

	# Specifies the prefix for the Redis connection name, pubsub
	# channels and get/set keys. Defaults to 'radiator'
	#Prefix radius

	# Specifies the instance specific part of the Redis connection
	# name and pubsub channels. Special formatting characters are
	# supported. Defaults to '%h.%O' (hostname and farm instance
	# number)
	#InstanceId devel-%h.%O

	# Sets the connection and command timeout period in seconds
	# for the connection to the Redis server. Defaults to 1 second
	#Timeout 2

	# If Radiator detects a Redis server failure, it will wait for
	# this number of seconds before trying to contact the Redis
	# server again. Defaults to 10 seconds.
	#FailureBackoffTime 30

	# Specifies a Redis DB index. Defaults to 0
	#DbIndex 1

	# Enable verbose debugging. Requires Perl Data::Printer module
	#Debug
</GossipRedis>

# HASHBALANCE will use information in the incoming request to choose
# the preferred host, with the intention that all related requests
# will all go to the same target server, enabling EAP and other
# stateful RADIUS transactions to be loadbalanced without interfering
# with streams of related requests. If the preferred host is not
# available try the following ones until all are exhausted
<Handler>
	<AuthBy HASHBALANCE>
		# Use the Radiator Gossip framework to distribute
		# information about failed Hosts. Host failures are
		# monitored with Status-Server probing.
		Gossip
		UseStatusServerForFailureDetect
		KeepaliveTimeout 5

		# Only the first farm member runs Status-Server and
		# the others get the failure and recovery information
		# via Gossip messages. This may be required if Hosts
		# do not accept multiple Status-Server requests from
		# the same IP address in close succession. Can be set
		# by Host. Defaults to not set (each farm member does
		# Status-Server probing).
		NoKeepaliveTimeoutForChildInstances

		# Instead of Status-Server probing, you can optionally
		# set a backoff time. If Gossip is enabled, the
		# failure and recovery information is distributed
		# based on Retries and other related
		# parameters. FailureBackoffTime 0 means that it will
		# always try the preferred host for every request
		FailureBackoffTime 60

		# The default values for the Hosts clauses below come
		# from the attributes of the same name here. You can
		# override them in the Host clause
		Secret mysecret
		RetryTimeout 2
		Retries 0

		# You can optionally configure how the hash is
		# computed. You should not need to change this, since
		# it needs to match how EAP contexts are recovered
		#HashAttributes %{Calling-Station-Id}:%n

		# Caution: the server farm proxies requests to the backends from
		# different ports and with potentially different IDS. This can cause
		# problems with duplicate detection in the backends unless the backend
		# Clients have UseContentsForDuplicateDetection set or the server farm
		# has DupCache set to 'shared' or 'global'.
		<Host 127.0.0.1>
		      AuthPort 18812
		      AcctPort 18813
		</Host>
		<Host 127.0.0.1>
		      AuthPort 18814
		      AcctPort 18815
		</Host>
	</AuthBy>
</Handler>
